#!/bin/bash

pipe()
{
	if [ "$1" = --help ]
	then
		echo "NAME"
		echo "  pipe - mimic pipe(2) syscall in shell"
		echo "INVOCATION"
		echo "  pipe <READER_VAR> <WRITER_VAR>"
		echo "DESCRIPTION"
		echo "  Create anonymous pipe."
		echo "  Reader end's file descriptor stored in variable name in the first argument."
		echo "  Writer end's file descriptor stored in variable name in the second argument."
		echo "EXAMPLE"
		echo "  pipe read_fd write_fd"
		echo "  echo Lorem ipsum >&\$write_fd"
		echo "  read -u \$read_fd data"
		echo "  echo \$data  # => Lorem ipsum"
		return
	fi
	
	local pid1 pid2 myin myout lnk0 lnk1
	[ "$1" = rdr ] || local rdr
	[ "$2" = wtr ] || local wtr
	
	myin=`readlink /proc/self/fd/0`
	myout=`readlink /proc/self/fd/1`
	
	# calling sleep(1) via env to avoid bash's built-in sleep which may not know 'inf'.
	env sleep inf | env sleep inf &
	pid2=$!
	pid1=$(jobs -p %+)
	
	while true
	do
		lnk0=`readlink /proc/$pid2/fd/0`
		lnk1=`readlink /proc/$pid1/fd/1`
		if [ "$lnk0" != "$myin" -a "$lnk1" != "$myout" ]
		then
			break
		fi
	done
	
	exec {wtr}>/proc/$pid1/fd/1 {rdr}</proc/$pid2/fd/0
	
	disown $pid2
	kill -KILL $pid1 $pid2  # sometimes INT and TERM are blocked, but it's safe to kill such a no-op process
	
	eval $1=$rdr
	eval $2=$wtr
}

close()
{
	if [ "$1" = --help ]
	then
		echo "NAME"
		echo "  close - mimic close(2) syscall in shell"
		echo "INVOCATION"
		echo "  close <FD_1> [FD_2 [FD_3 [...]]]"
		echo "DESCRIPTION"
		echo "  Close file descriptor(s) given in arguments."
		echo "EXAMPLE"
		echo "  pipe read_fd write_fd"
		echo "  close \$write_fd"
		return
	fi
	
	local fd
	for fd in "$@"
	do
		#eval "exec $fd>&-"
		exec {fd}>&-
	done
}

capture2()
{
	if [ "$1" = --help ]
	then
		echo "NAME"
		echo "  capture2 - store a command's stdout and stderr in separated variables"
		echo "INVOCATION"
		echo "  capture2 <COMMAND> [<ARGS>]"
		echo "DESCRIPTION"
		echo "  Capture <COMMAND>'s stdout and stderr in separated shell variables"
		echo "  without running it twice."
		echo "  Store stdout and stderr data in script-global variables"
		echo "  called \$capture2_stdout and \$capture2_stderr respectively."
		echo "EXAMPLE"
		echo "  capture2 ls -lRA /etc"
		echo "  echo output was "'\$capture2_stdout'""
		echo "  echo error was "'\$capture2_stderr'""
		echo "RETURN VALUE"
		echo "  <COMMAND>'s exit status"
		echo "VARIABLES"
		echo "  using the following script-global variables"
		echo "  - capture2_stdout"
		echo "  - capture2_stderr"
		echo "CAVEAT"
		echo "  May not work on large output, depend on fifo buffer size."
		echo "SEE ALSO"
		echo "  pipe(1bash) close(1bash)"
		return
	fi
	
	local x r w
	pipe r w
	capture2_stdout=$("$@" 2>&$w)
	x=$?
	close $w
	capture2_stderr=$(cat <&$r)
	close $r
	return $x
}

is_digit()
{
	[ "$1" = 0 -o "$1" = 1 -o "$1" = 2 -o "$1" = 3 -o "$1" = 4 -o "$1" = 5 -o "$1" = 6 -o "$1" = 7 -o "$1" = 8 -o "$1" = 9 ]
}

is_number()
{
	[ "$1" -ge 0 -o "$1" -lt 0 ] 2>/dev/null
}

is_alpha()
{
	expr "$1" : '[a-zA-Z]\+$' >/dev/null 2>&1
}

warnx()
{
	# warnx - mimic warnx(3) in shell
	local msg="$*"
	local ln
	local rest_msg
	while [ -n "$msg" ]
	do
		ln=${msg%%$'\n'*}
		rest_msg=${msg#*$'\n'}
		if [ "$msg" = "$rest_msg" ]
		then
			msg=''
		else
			msg=$rest_msg
		fi
		echo "${0##*/}: $ln" >&2
	done
}

errx()
{
	# errx - mimic errx(3) in shell
	errno=$1
	shift
	warnx "$@"
	exit $errno
}

bash_isset()
{
	local sets=${2:-$-}
	sets=${sets//[!$1]/}
	echo ${sets:-_}
}

bash_defined()
{
	[ "${!1+x}" = x ]
}

bash_trapbody()
{
	local a
	a=`trap -p "$1"`
	if [ -z "$a" ]
	then
		echo -
		return
	fi
	a=${a:9}
	a=${a:0:-${#1}-2}
	echo "$a"
}

try()
{
	declare -g TRYSTACK
	local savesets=$-
	TRYSTACK+=($(bash_isset e $savesets)$(bash_isset E $savesets)"$(bash_trapbody ERR)")
	trap - ERR
	
	while [ -n "$1" ]
	do
		case "$1" in
		--except)
			shift
			trap "$1" ERR
			;;
		*)
			echo "Unknown option: $1" >&2
			set -o errexit
			false
			;;
		esac
		shift
	done
	
	set -o errexit
	set -o errtrace
}

untry()
{
	local trydata
	trydata=${TRYSTACK[-1]}
	unset TRYSTACK[${#TRYSTACK[@]}-1]
	[ "${trydata:0:1}" = _ ] && set +o errexit || set -o errexit
	[ "${trydata:1:1}" = _ ] && set +o errtrace || set -o errtrace
	trap "${trydata:2}" ERR
	return 0
}

fixerrexit()
{
	( eval "expr '$-' : '.*e' >/dev/null && set -e; $*"; )
}

template()
{
	cat "$@" |\
	{
		local rline tvar var replace sedexpr
		while read -r
		do
			rline=$REPLY
			sedexpr=""
			{ grep -Eo '%[a-zA-Z0-9\./_-]+%' <<<"$rline" || true; } |\
			sort -u |\
			{
				while read tvar
				do
					# strip percent marks
					var=${tvar:1:-1}
					# resolve bash variable
					replace=${!var}
					# avoid backrefs
					replace=${replace//\\/\\\\}
					# avoid whole match backref
					replace=${replace//&/\\&}
					# compose sed expression like: s@%user\.name%@joe@g;s@%user\.email%@joe\@local@g;
					sedexpr="${sedexpr}s@${tvar//\./\\.}@${replace//@/\@}@g;"
				done
				# action
				sed -e "$sedexpr" <<<"$rline"
			}
		done
	}
}

errorlevel()
{
	return $1
}

bash_join()
{
	if [ ${#1} = 1 ]
	then
		local IFS=$1
		shift
		echo "$*"
	else
		local d=$1
		shift
		local n=0
		local x
		for x in "$@"
		do
			if [ $n -gt 0 ]
			then
				printf %s "$d"
			fi
			printf %s "$x"
			n=$[n+1]
		done
	fi
}

in_list()
{
	local needle=$1
	local hay
	shift
	for hay in "$@"
	do
		if [ ".$hay" = ".$needle" ]
		then
			return 0
		fi
	done
	return 1
}

array_shift()
{
	if [ "$1" = --help ]
	then
		echo "NAME"
		echo "  array_shift - print and remove the first element from a bash indexed array"
		echo "INVOCATION"
		echo "  array_shift <VARNAME>"
		echo "EXAMPLE"
		echo "  shoplist=(bread milk sausage)"
		echo "  first_element=\$(array_shift shoplist)"
		echo "  next_element=\$(array_shift shoplist)"
		return
	fi
	
	local array_name=$1
	local aux
	eval "aux=\${$array_name[0]}"
	unset $array_name[0]
	eval "$array_name=(\"\${$array_name[@]}\")"
	echo "$aux"
}

array_reverse()
{
	if [ "$1" = --help ]
	then
		echo "NAME"
		echo "  array_reverse - reverse the order of elements in a bash array in-place"
		echo "INVOCATION"
		echo "  array_reverse <VARNAME>"
		echo "RETURN VALUE"
		echo "  void"
		return
	fi
	
	local array_name=$1
	local i ci len aux
	eval "len=\${#$array_name[@]}"
	for ((i=0; i<len/2; i++))
	do
		ci=$[len-i-1]
		eval "aux=\${$array_name[$i]}"
		eval "$array_name[$i]=\${$array_name[$ci]}"
		eval "$array_name[$ci]=\$aux"
	done
}

bash_scriptdir()
{
	dirname "$(readlink -f "${BASH_SOURCE[-1]}")"
}

ECHO()
{
	printf %s "$*"
}

canonize_semver()
{
	# return the canonical form of a version string
	local ver=$1
	# trailing ".0" is considered meaningless by SemVer
	while [[ $ver =~ ^(.+)\.0+$ ]]
	do
		ver=$${BASH_REMATCH[1]}
	done
	echo "$ver"
}

version_compare()
{
	# take 2 version numbers (as strings) in arguments, say A and B.
	# return
	#   0 when A equals to B,
	#   1 when A is greater than B, or
	#   255 (ie. -1) when A is less than B.
	local ver_a=$1
	local ver_b=$2
	ver_a=`canonize_semver "$ver_a"`
	ver_b=`canonize_semver "$ver_b"`
	if [ "$ver_a" = "$ver_b" ]
	then
		return 0
	fi
	# feed the 2 version numbers, 1 per line, to sort, then take the first line, which will be the lesser one.
	local lesser_version=`echo "$ver_a"$'\n'"$ver_b" | sort --version-sort | sed -ne 1p`
	if [ "$ver_a" = "$lesser_version" ]
	then
		return 255
	else
		return 1
	fi
}

version_is_lesser()
{
	version_compare "$1" "$2"
	if [ $? = 255 ]
	then
		return 0
	else
		return 1
	fi
}

version_is_greater()
{
	version_compare "$1" "$2"
	if [ $? = 1 ]
	then
		return 0
	else
		return 1
	fi
}

version_is_greater_or_equal()
{
	! version_is_lesser "$@"
}

version_is_lesser_or_equal()
{
	! version_is_greater "$@"
}
