#!/usr/bin/env perl

=pod

=head1 NAME

cled - Command Line-Editor - Edit text file lines by commands directly from shell

=head1 SYNOPSIS

 cled [<OPTIONS>] <EXPR> [<EXPR> [...]] [-- <FILE> [<FILE> [...]]]

=head1 DESCRIPTION

Each EXPR expression consist of an optional SELECTOR term and a command
and variable number of arguments depending on the command
(see COMMANDS section), like:

 <SELECTOR>[..<SELECTOR>] <COMMAD> [<ARG> [<ARG> [...]]]

You may narrow the COMMAND's effect by a SELECTOR term.
A SELECTOR selects either one line or a closed range of lines.
For ranges, put C<..> (double dot) between SELECTORs.
A SELECTOR may be a regexp, ie. C</PATTERN/[MODIFIERS]>,
or a line number, or the literal word C<last> which means the last line.
SELECTOR syntax:

 [ /<REGEXP>/[<MODIFIERS>][[+ | -]<OFFSET>] | <LINE> | last[-<OFFSET>] ]

Examples:

 10../lorem/i

Select line 10 and all subsequent lines down to the first one matching
to case-insensitive "lorem".

 /begin/../end/

Select the lines between /begin/ and /end/ inclusively.

 /begin/+1../end/-1

Select the lines between /begin/ and /end/ exclusively.

The 2nd SELECTOR does not get tested on the same line as the 1st
SELECTOR.
So you can select at least a 2-lines long range by eg. C</start/../stop/>.
If the 2nd SELECTOR is REGEXP and it does not match any lines, then
practically it's an open-ended range, so the rest of the file is
selected.
Line numbers are indexed from 0.

REGEXP and the C<last> SELECTOR have an optional OFFSET: eg. C</begin/+2>
selects the 2nd line following a line matching to /begin/. The C<last>
SELECTOR obviously supports only negative OFFSETs.

An EXPR expression can be a group denoted by brackets,
in which there are subexpressions like EXPR.
This way you can do multiple COMMAND commands, all when the common
SELECTOR matches to the line in order:

 /^d/ [ ltrim prepend " " ]

Which removes all leading whitespace, if any, from lines starting with
"d" and inserts a single space at the beginning of all of them.
See COMMANDS below for all the supported editor commands.

Currently 3 type of brackets are supported: C<[ ... ]> square,
C<{ ... }> curly, and C<( ... )> parenthesis. Use the square one to
save shell escaping.

=head1 OPTIONS

=over 4

=item -f, --file PATH

File to edit.
May specify multiple times.
Files are edited in-place by default, by persisting their Inode,
ie. buffer the output data and write to the original input file
when it's all read up.
If --output option(s) is (are) given, then the file(s) won't be
modified in-place, rather than saved in output file(s).
If not given any --file, works on STDIN and print to STDOUT.

=item -o, --output PATH

File to save modified data into.
May specify multiple times.
If less --output parameters given than --file, then the input files
without a corresponding output file will be edited in-place.

=item -c, --confirm

Prompt for confirmation for each selected line.
If a readline module is installed then you may do further changes to the
lines interactively.
Term::ReadLine::Gnu(3pm) module is recommended.

Press Ctrl-J to insert newline (LF) at the cursor position,
as it's not added automaticaly to the end of line.

If no readline module available, press only a single Enter to accept
changes, and Ctrl-C to revert to the original line, or type in new
content and press Enter to replace the promped line (newline is added
to the end in this case).
Additionally an inverse space char at the end of line indicates if the last
line is not terminated by a newline.

=item -v, --verbose

Print edited lines to STDERR.
Prefixed with line number if option C<-l> is given.
A line is edited if it's selected by any SELECTOR and not reverted
thereafter at the interactive prompt.

=item -l

Show line numbers in verbose mode.

=back

=cut


use Data::Dumper;
use Getopt::Long qw/:config no_ignore_case bundling pass_through/;
use feature qw/switch/;
no if ($] >= 5.018), 'warnings' => 'experimental::smartmatch';
use Pod::Usage;
# Term::ReadLine::Gnu is recommended
$readline_support = eval q{ use Term::ReadLine; 1; };
use POSIX;

$0 =~ s/.*\/([^\/]+)$/$1/;
$OptConfirm = 0;
$OptVerbose = 0;
$OptVerboseLnum = 0;
@Files = ();
@Output = ();

# Getopt::Long(3perl)
# When configured for bundling, single-character options are matched
# case sensitive while long options are matched case insensitive.

$SIG{'__WARN__'} = sub { warn "$0: $_[0]"; };
GetOptions(
	'c|confirm' => \$OptConfirm,
	'f|file=s@' => \@Files,
	'help|?' => sub{ pod2usage(-exitval=>0, -verbose=>99); },
	'o|output=s@' => \@Output,
	'v|verbose' => \$OptVerbose,
	'l' => \$OptVerboseLnum,
) or exit 2;
delete $SIG{'__WARN__'};


sub readline_insert_lf
{
	my $pos = $readline->Attribs->{'point'};
	my $buf = $readline->Attribs->{'line_buffer'};
	$readline->Attribs->{'line_buffer'} = substr($buf, 0, $pos)."\n".substr($buf, $pos);
	$readline->Attribs->{'point'} += 1;
}

if($readline_support)
{
	$readline = Term::ReadLine->new('cled');
	$readline->ornaments(0);
	$readline->add_defun('insert_lf', \&readline_insert_lf);
	$readline->bind_keyseq('\\C-j', 'insert_lf');
	$readline->variable_bind('echo-control-characters', 0);
}

sub select_by_match
{
	my $state = shift;
	return ${$state->{'line_ref'}} =~ /(?$_[1])$_[0]/;
}
sub select_line_eq
{
	my $state = shift;
	return $state->{'line_num'} == $_[0];
}
sub select_line_num_cmp
{
	my $state = shift;
	return $state->{'line_num'} <=> $_[0];
}
sub select_never
{
	return 0;
}
sub select_always
{
	return 1;
}

sub add_selector
{
	my $selector_expr = shift;
	my $ref = shift;
	my ($match_expr, $offset) = $selector_expr =~ /^(.+?)([+-]\d+|)$/;
	given($match_expr)
	{
		when(/^\d+$/)
		{
			$ref->{'sub'} = \&select_line_eq;
			$ref->{'relative_sub'} = \&select_line_num_cmp;
			$ref->{'arg'} = [int $match_expr];
		}
		when('last')
		{
			$ref->{'sub'} = \&select_never;
		}
		when(m{^/(.*)/([[:alpha:]]*)$})
		{
			my ($pattern, $modifiers) = ($1, $2);
			eval { "" =~ /(?$modifiers)$pattern/; 1; };
			die "$0: $selector_expr: $@" if $@;
			$ref->{'sub'} = \&select_by_match;
			$ref->{'arg'} = [$pattern, $modifiers];
		}
		default
		{
			if($selector_expr eq '')
			{
				$ref->{'sub'} = \&select_always;
			}
			else
			{
				die "$0: should not happen.";
			}
		}
	}
	$ref->{'offset'} = int($offset || 0);
}


=pod

=head1 COMMANDS

=over 4

=item s/<PATTERN>/<REPLACEMENT>/[<MODIFIERS>]

Regexp substitution. Works just like in perl(1). See perlre(1).

=cut


# define how many arguments each edit_* subroutine expects from the CLI
# by putting eg. $NumberOfCliArgs{'xyz'}=2 before "sub edit_xyz".
# Omit if does not need any CLI argument.
%NumberOfCliArgs = ();

=pod

=item edit

Edit selected lines interactively by a readline interface.
See --confirm option in OPTIONS section for details.

=cut

sub edit_edit
{
	my $state = shift;
	$state->{'confirm'} = 1;
}

=pod

=item delete

Delete matching line(s).

=cut

sub edit_delete
{
	my $state = shift;
	${$state->{'line_ref'}} = '';
}

=pod

=item ltrim, rtrim, trim

Remove leading (ltrim), trailing (rtrim), or leading and trailing (trim) whitespace from the line.
End-of-line char (LF, \n) is preserved.

=cut

sub edit_trim
{
	edit_ltrim(@_);
	edit_rtrim(@_);
}
sub edit_ltrim
{
	my $state = shift;
	${$state->{'line_ref'}} =~ s/^\s*//;
}
sub edit_rtrim
{
	my $state = shift;
	my $eol = '';
	${$state->{'line_ref'}} =~ /(\n)$/ and $eol = $1;
	${$state->{'line_ref'}} =~ s/\s*$//;
	${$state->{'line_ref'}} .= $eol;
}

=pod

=item replace STR1 STR2

Replace all STR1 to STR2.

=cut

$NumberOfCliArgs{'replace'} = 2;
sub edit_replace
{
	my $state = shift;
	${$state->{'line_ref'}} =~ s/\Q$_[0]\E/$_[1]/g;
}

=pod

=item replaceword STR1 STR2

Replace whole word STR1 to STR2.

=cut

$NumberOfCliArgs{'replaceword'} = 2;
sub edit_replaceword
{
	my $state = shift;
	${$state->{'line_ref'}} =~ s/\b\Q$_[0]\E\b/$_[1]/g;
}

=pod

=item replaceline STR

Replace the whole line to STR.

=cut

$NumberOfCliArgs{'replaceline'} = 1;
sub edit_replaceline
{
	my $state = shift;
	my $eol = '';
	${$state->{'line_ref'}} =~ /(\n)$/ and $eol = $1;
	${$state->{'line_ref'}} = $_[0];
	${$state->{'line_ref'}} .= $eol;
}

=pod

=item prepend STR

Prepend STR to the line.

=cut

$NumberOfCliArgs{'prepend'} = 1;
sub edit_prepend
{
	my $state = shift;
	${$state->{'line_ref'}} = $_[0] . ${$state->{'line_ref'}};
}

=pod

=item insertline STR

Insert STR as a whole line before the matching line(s).
Line numbering is preserved as there was not an inserted line,
ie. line numbers are not incremented.

=cut

$NumberOfCliArgs{'insertline'} = 1;
sub edit_insertline
{
	my $state = shift;
	${$state->{'line_ref'}} = $_[0] . "\n" . ${$state->{'line_ref'}};
}

=pod

=item insertfile PATH

Insert the content of PATH file before the matching line(s).
The last line of PATH file will be separated from the matched line by a 
newline (LF) either way.
Line numbering is preserved as described above.

=cut

$NumberOfCliArgs{'insertfile'} = 1;
sub edit_insertfile
{
	my $state = shift;
	open my $fh, '<', $_[0] or die "$_[0]: $!\n";
	local $/ = undef;
	my $filecontent = <$fh>;
	close $fh;
	my $eol = $filecontent =~ /\n$/ ? '' : "\n";
	${$state->{'line_ref'}} = $filecontent . $eol . ${$state->{'line_ref'}};
}

=pod

=item append STR

Append STR to the line.

=cut

$NumberOfCliArgs{'append'} = 1;
sub edit_append
{
	my $state = shift;
	my $eol = '';
	${$state->{'line_ref'}} =~ s/(\n)$// and $eol = $1;
	${$state->{'line_ref'}} .= $_[0];
	${$state->{'line_ref'}} .= $eol;
}

=pod

=item appendline STR

Append STR as a whole line to the matching line(s).
Line numbering is preserved as described above.

=cut

$NumberOfCliArgs{'appendline'} = 1;
sub edit_appendline
{
	my $state = shift;
	${$state->{'line_ref'}} .= $_[0] . "\n";
}

=pod

=back

=cut

sub cled_eval
{
	my $state = shift;
	eval $_[0];
}

sub signal_int_handler
{
	die "SIGINT\n";
}


@Commands = ();
@group_selectors = ();

ArgumentParsing:
while(@ARGV)
{
	my $ThisCmd = {};
	my $selector = {};
	
	if($ARGV[0] eq '--')
	{
		shift @ARGV;
		push @Files, @ARGV;
		last;
	}
	
	if(my ($selector_start, $selector_stop) = $ARGV[0] =~ m{^(/.*/[[:alpha:]]*(?:[+-]\d+|)|\d+)\.\.(/.*/[[:alpha:]]*(?:[+-]\d+|)|\d+|last(?:-\d+|))$})
	{
		$selector->{'repr'} = $ARGV[0];
		$selector->{'start'} = {};
		add_selector $selector_start, $selector->{'start'};
		$selector->{'stop'} = {};
		add_selector $selector_stop, $selector->{'stop'};
		shift @ARGV;
	}
	elsif(my ($selector_expr) = $ARGV[0] =~ m{^(/.*/[[:alpha:]]*(?:[+-]\d+|)|\d+)$})
	{
		# FIXME: make it possible to select the last line (single selector)
		# TODO: last-N to select the last but Nth line (buffering required)
		# FIXME: fix /asd/-1..5 style selectors
		$selector->{'repr'} = $ARGV[0];
		$selector->{'single'} = {};
		add_selector $selector_expr, $selector->{'single'};
		shift @ARGV;
	}
	
	if($ARGV[0] ~~ ['[', '(', '{'])
	{
		if(not %$selector)
		{
			$selector->{'repr'} = '';
			$selector->{'single'} = {};
			add_selector '', $selector->{'single'};
		}
		push @group_selectors, $selector;
		shift @ARGV;
		next;
	}
	
	if($ARGV[0] ~~ [']', ')', '}'])
	{
		die "$0: selector without a command: $selector->{'repr'}\n" if %$selector;
		pop @group_selectors or die "$0: too many closing brackets\n";
		shift @ARGV;
		next;
	}
	
	my $editcmd = shift @ARGV or die "$0: missing command\n";
	
	given($editcmd)
	{
		if(@group_selectors)
		{
			my @group_selectors_copy;
			for my $sel_ref (@group_selectors)
			{
				my %sel = %$sel_ref;
				push @group_selectors_copy, \%sel;
			}
			push @{$ThisCmd->{'selectors'}}, @group_selectors_copy;
		}
		if(%$selector)
		{
			push @{$ThisCmd->{'selectors'}}, $selector;
		}
		
		when(m{^(s/.*/.*/.*)$})
		{
			$ThisCmd->{'editor'} = {'sub' => \&cled_eval, 'arg' => [sprintf('${$state->{"line_ref"}} =~ %s',$1)],};
		}
		default
		{
			my $edit_sub = sprintf 'edit_%s', $editcmd;
			if(not exists &$edit_sub)
			{
				die "$0: unknown editor command or selector: $editcmd\n";
			}
			
			my @cli_args = ();
			my $num_args = $NumberOfCliArgs{$editcmd};
			if($num_args)
			{
				@cli_args = @ARGV[0..$num_args-1];
				shift @ARGV for 0..$num_args-1;
			}
			
			$ThisCmd->{'editor'} = {'name' => $editcmd, 'sub' => \&{$edit_sub}, 'arg' => \@cli_args};
		}
	}
	
	$ThisCmd->{'n'} = scalar @Commands;
	push @Commands, $ThisCmd;
}

undef @group_selectors;
#warn Dumper \@Commands;


# if no readline support and --confirm requested or any of the editor commands is 'edit'
if(not $readline_support and ($OptConfirm or grep {$_->{'editor'}->{'sub'} eq \&edit_edit} @Commands))
{
	open $terminal_fh, '<', '/dev/tty' or die "$0: /dev/tty: $!\n";
}



sub filehandler_write
{
	my $event = shift;
	my $data = shift;
	my $meta = shift;
	if($event eq 'append')
	{
		return print {$meta->{'fh'}} $data;
	}
	return 1;
}

sub buffered_overwrite
{
	my $event = shift;
	my $data = shift;
	my $meta = shift;
	given($event)
	{
		when('start')
		{
			$meta->{'buffer'} = '';
		}
		when('append')
		{
			$meta->{'buffer'} .= $data;
		}
		when('finish')
		{
			print {$meta->{'fh'}} $meta->{'buffer'} or return 0;
			truncate($meta->{'fh'}, tell $meta->{'fh'}) or return 0;
		}
	}
	return 1;
}

sub process_file
{
	my $fh = shift;
	my $commands_ref = shift;
	my @commands = @$commands_ref;
	my $output_cb = shift;
	my $cb_metadata = shift;
	my $lnum = 0;
	
	# find out the maximum backtrack distance
	# to set the buffer size which holds the lines' state
	# which have not been decided to edit yet
	# due to negative offsets
	
	my @linebuffer = ();
	my $largest_negative_offset = 0;
	for my $cmd (@commands)
	{
		for my $selector (@{$cmd->{'selectors'}})
		{
			$largest_negative_offset = $selector->{'start'}->{'offset'} if $selector->{'start'}->{'offset'} < $largest_negative_offset;
			$largest_negative_offset = $selector->{'stop'}->{'offset'}  if $selector->{'stop'}->{'offset'}  < $largest_negative_offset;
		}
	}
	
	$output_cb->('start', undef, $cb_metadata);
	
	while(my $line = <$fh>)
	{
		my %buffered_line = (
			'data_before' => $line,
			'edited' => 0,
			'state' => {
				'line_ref' => \$line,
				'line_num' => $lnum,
				'confirm' => undef,
			}
		);
		
		for my $cmd (@commands)
		{
			my $selected = 1;
			
			for my $selector (@{$cmd->{'selectors'}})
			{
				if(exists $selector->{'single'})
				{
					$selected = $selector->{'single'}->{'sub'}->($buffered_line{'state'}, @{$selector->{'single'}->{'arg'}});
				}
				elsif(exists $selector->{'start'} and exists $selector->{'stop'})
				{
					# this is a range selector, let's maintain its state.
					$selected = $selector->{'matched'};
					
					if(defined $selector->{'will_start_after'})
					{
						$selector->{'will_start_after'} -= 1;
					}
					else
					{
						my $matched = $selector->{'start'}->{'sub'}->($buffered_line{'state'}, @{$selector->{'start'}->{'arg'}});
						if($matched)
						{
							my $offset = $selector->{'start'}->{'offset'};
							if($offset < 0)
							{
								$linebuffer[$_]->{'editors'}->[$cmd->{'n'}]->{'selected'} = 1 for $offset..-1;
								$selector->{'matched'} = 1;
								$selected = 1;
							}
							else
							{
								$selector->{'will_start_after'} = $offset;
							}
						}
					}
					if(defined $selector->{'will_start_after'} and $selector->{'will_start_after'} == 0)
					{
						$selector->{'matched'} = 1;
						$selected = 1;
						delete $selector->{'will_start_after'};
					}
					
					if(defined $selector->{'will_stop_after'})
					{
						$selector->{'will_stop_after'} -= 1;
					}
					else
					{
						# check if the range is being closed in this line.
						my $match_stop = $selector->{'stop'}->{'sub'}->($buffered_line{'state'}, @{$selector->{'stop'}->{'arg'}});
						if($match_stop)
						{
							my $offset = $selector->{'stop'}->{'offset'};
							if($offset < 0)
							{
								$linebuffer[$_]->{'editors'}->[$cmd->{'n'}]->{'selected'} = 0 for (($offset+1)..-1);
								$selector->{'matched'} = 0;
								$selected = 0;
							}
							else
							{
								$selector->{'will_stop_after'} = $offset;
							}
						}
					}
					if(defined $selector->{'will_stop_after'} and $selector->{'will_stop_after'} == 0)
					{
						$selector->{'matched'} = 0;
						delete $selector->{'will_stop_after'};
					}
					
					if(defined $selector->{'stop'}->{'relative_sub'})
					{
						my $cmp = $selector->{'stop'}->{'relative_sub'}->($buffered_line{'state'}, @{$selector->{'stop'}->{'arg'}});
						if($cmp > 0)
						{
							# this range is already closed because we have passed by the line number.
							$selected = 0;
						}
					}
				}
				else
				{
					die "$0: should not happen.";
				}
				
				last if not $selected;
			}
			
			push @{$buffered_line{'editors'}}, {
				'selected' => $selected,
				'editor' => $cmd->{'editor'},
			};
		}
		
		push @linebuffer, \%buffered_line;
		
		process_line_buffer(\@linebuffer, $largest_negative_offset, $output_cb, $cb_metadata);
		
		$lnum++;
	}
	
	process_line_buffer(\@linebuffer, 0, $output_cb, $cb_metadata);
	
	$output_cb->('finish', undef, $cb_metadata) or return 0;
	
	return 1;
}

sub process_line_buffer
{
	my $linebuffer_ref = shift;
	my $largest_negative_offset = shift;
	my $output_cb = shift;
	my $cb_metadata = shift;
	
		while(scalar @$linebuffer_ref > -$largest_negative_offset)
		{
			my $processing_line = shift $linebuffer_ref;
			
			# perform all edit commands on this line
			for my $editor (@{$processing_line->{'editors'}})
			{
				# perform this edit command if any group selector or the command's own selector matched
				if($editor->{'selected'})
				{
					$processing_line->{'selected'} = 1;
					$editor->{'editor'}->{'sub'}->($processing_line->{'state'}, @{$editor->{'editor'}->{'arg'}});
					$processing_line->{'edited'} = 1;
				}
			}
			
			# prompt user for confirmation if needed
			my $do_confirm = $OptConfirm;
			$do_confirm = $processing_line->{'state'}->{'confirm'} if defined $processing_line->{'state'}->{'confirm'};
			
			my $before = $processing_line->{'data_before'};
			my $line = ${$processing_line->{'state'}->{'line_ref'}};
			my $lnum = $processing_line->{'state'}->{'line_num'};
			
			if($processing_line->{'selected'} and $do_confirm)
			{
				my $confirmation;
				print STDERR "$lnum: $before";
				print STDERR "\n" unless $before =~ /\n$/;
				my $prompt = "$lnum> ";
				my $old_sigaction = {};
				
				eval {
					if($readline_support)
					{
						my $startup_hook = $readline->Attribs->{'startup_hook'};
						# Perl's signal handlers (%SIG) don't work in readline,
						# so setup a low-level signal handler to intercept Ctrl-C.
						sigaction SIGINT, POSIX::SigAction->new(sub {
							# readline is interrupted so it can not restore the startup_hook
							# which was modified to "preput" the initial data in the rl buffer.
							$readline->Attribs->{'startup_hook'} = $startup_hook;
							die "SIGINT\n";
						}),$old_sigaction;
						
						$confirmation = $readline->readline($prompt, $line);
					}
					else
					{
						local $SIG{'INT'} = \&signal_int_handler;
						
						print STDERR "$prompt$line";
						# display an inverse-video space to indicate no-EOL.
						print STDERR "\x1B[7m \x1B[0m\n" unless $line =~ /\n$/;
						$confirmation = <$terminal_fh>;
						$confirmation = $line if $confirmation eq "\n";
					}
				};
				
				if($@)
				{
					if($@ eq "SIGINT\n")
					{
						# user pressed Ctrl-C
						if($readline_support)
						{
							# show the original line
							$readline->Attribs->{'line_buffer'} = $before;
							$readline->Attribs->{'point'} = length $before;
							$readline->redisplay;
						}
						$confirmation = undef;
					} else {
						# other exception happened
						die $@;
					}
				}
				
				# restore low-level signal handler.
				if($readline_support and %$old_sigaction)
				{
					sigaction SIGINT, POSIX::SigAction->new($old_sigaction->{'HANDLER'});
				}
				
				# revert the line to the original as it was before,
				# or apply what the user typed, depending on the confirmation result
				if(defined $confirmation)
				{
					$line = $confirmation;
				} else {
					$line = $before;
					$processing_line->{'edited'} = 0;
				}
			}
			
			if($OptVerbose and $processing_line->{'edited'})
			{
				print STDERR "$lnum: " if $OptVerboseLnum;
				# TODO: line numbering gets confusing when the newline is removed from or extra newlines added in $line
				print STDERR $line;
			}
			
			if($line ne '')
			{
				$output_cb->('append', $line, $cb_metadata) or return 0;
			}
		}
}

if(@Files)
{
	for my $file_idx (0..$#Files)
	{
		my $in_path = $Files[$file_idx];
		my $out_path = $Output[$file_idx];
		
		open my $in_fh, '<', $in_path or die "$in_path: $!\n";
		
		my $output_handler = \&buffered_overwrite;
		my $output_handler_meta = {};
		
		if(defined $out_path)
		{
			open my $out_fh, '>', $out_path or die "$out_path: $!\n";
			$output_handler = \&filehandler_write;
			$output_handler_meta->{'fh'} = $out_fh;
			$output_handler_meta->{'fname'} = $out_path;
		}
		else
		{
			open my $out_fh, '+<', $in_path or die "$in_path: $!\n";
			$output_handler_meta->{'fh'} = $out_fh;
			$output_handler_meta->{'fname'} = $in_path;
		}
		
		my $file_ok = process_file($in_fh, \@Commands, $output_handler, $output_handler_meta);
		
		if(not $file_ok)
		{
			die "$in_path: $!\n";
		}
		
		close $in_fh or die "$in_path: $!\n";
		close $output_handler_meta->{'fh'} or die "$output_handler_meta->{'fname'}: $!\n";
	}
}
else
{
	process_file(\*STDIN, \@Commands, \&filehandler_write, {'fh'=>\*STDOUT});
}

=pod

=head1 SIMILAR PROJECTS

=over 4

=item L<https://github.com/andrewbihl/bsed>

=back

=cut
