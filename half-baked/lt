#!/bin/bash

alternatives=4
source=''
target=''
format=text
domain=''
host=''
port=''

while [[ $1 =~ (.+)(=|→)(.+) ]]
do
	group=("${BASH_REMATCH[@]}")
	case "${group[2]}" in
	(=)
		varname=${group[1]}
		value=${gorup[3]}
		eval "$varname=\$value"
		;;
	(→)
		source=${group[1]}
		target=${group[3]}
		;;
	esac
	shift
done

if [ -z "$*" ]
then
	{
		echo "Usage: $0 [<OPTIONS>] <TEXT>"
		echo "  OPTIONS:"
		echo "    domain=<DOMAIN>"
		echo "    host=<HOST> port=<PORT>"
		echo "    source=[<SOURCE_LANG> | auto]"
		echo "    target=<TARGET_LANG>"
		echo "    alternatives=<NUM>"
		echo "    <SOURCE_LANG>→<TARGET_LANG>"
	} >&2
	exit 1
fi


query_srv()
{
	local domain=$1
	declare -a service=(`dig +short -t SRV _http._tcp.$domain`)
	declare -g host=${service[3]}
	declare -g port=${service[2]}
}

if [ -z "$host" -a -z "$port" ]
then
	if [ -z "$domain" ]
	then
		domain_ok=''
		search_domains=(`cat /etc/resolv.conf | grep -E '^\s*search\s*' | rextr '^\s*search\s*(?<search_domains>.+)' | td-select -H search_domains`)
		for search_domain in "${search_domains[@]}"
		do
			host=''
			port=''
			domain=translate.$search_domain
			echo "searching translate service on $domain" >&2
			query_srv "$domain"
			if [ -n "$host" ]
			then
				domain_ok=1
				break
			fi
			domain=''
		done
		if [ -z "$domain_ok" ]
		then
			echo "no translate service found on any domain" >&2
		fi
	else
		query_srv "$domain"
	fi
	
	echo "service domain	$domain"
fi

echo "service host	$host"
echo "service port	$port"

if [ -z "$source" -o -z "$target" ]
then
	locale_lang=`locale | grep -E -m1 ^LANG= | cut -f2- -d= | cut -c1-2`
fi

if [ -z "$source" ]
then
	if [ -n "$target" -a "$target" != "$locale_lang" ]
	then
		source=$locale_lang
	else
		source=auto
	fi
fi

if [ -z "$target" ]
then
	target=$locale_lang
fi

echo "source language	$source" >&2
echo "target language	$target" >&2

resp=`http --pretty none --body --check-status --ignore-stdin \
	http://$host:$port/translate \
	alternatives="$alternatives" format=text source="$source" target="$target" q="$*"`

jget()
{
	local json=$1
	shift
	jq -r " $* // \"\" " <<< "$json"
}

error=`jget "$resp" .error`

if [ -n "$error" ]
then
	echo "$error" | prefixlines "error	"
	exit 2
fi

detectedLanguage=`jget "$resp" .detectedLanguage.language`
if [ -n "$detectedLanguage" ]
then
	confidence=`jget "$resp" .detectedLanguage.confidence`
	echo "detected language	$detectedLanguage"
	echo "detection confidence	$confidence%"
fi

jget "$resp" .alternatives[] | prefixlines "alternative	"
jget "$resp" .translatedText | prefixlines "translation	"
