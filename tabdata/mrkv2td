#!/usr/bin/env perl

=pod

=head1 NAME

mrkv2td - Transform multi-record key-value (MRKV) stream to tabular data format.

=head1 DESCRIPTION

As tabular data format presents field names at the start of transmission,
mrkv2td(1) infers them only from the first record,
so no need to buffer the whole dataset to find all fields,
and it's usual for all records to have all fields anyways.

=head1 OPTIONS

=over 4

=item -s, --separator I<REGEXP>

Regexp which separates field name from cell data in MRKV stream.
Default is TAB (C<\t>).

=item -g, --multiline-glue I<STRING>

If a field occurs multiple times in the MRKV input,
values will be joined by I<STRING> (B<newline> by default) in a single column in the TD output.

=item -i, --ignore-non-existing-columns

=item -w, --warn-non-existing-columns

=item -c, --column I<NAME>

Signal ahead that there will be a I<NAME> field in the MRKV input.
By default mrkv2td(1) considers fields which are in the first record only.
If your input has fields showing up only in later records, not in the first one,
then specify those by B<--column>.
Repeatable option.

=back

=head1 SEE ALSO

td2mrkv(1)

=cut

$OptSeparatorRegexp = "\t";
$OptMultilineGlue = "\n";
$OptWarnBadColumnNames = 1;
$OptFailBadColumnNames = 1;
@OptPredefColumns = ();
%OptionDefs = (
	's|separator=s' => \$OptSeparatorRegexp,
	'g|multiline-glue=s' => \$OptMultilineGlue,
	'i|ignore-non-existing-columns' => sub { $OptFailBadColumnNames = 0; $OptWarnBadColumnNames = 0; },
	'w|warn-non-existing-columns' => sub { $OptFailBadColumnNames = 0; $OptWarnBadColumnNames = 1; },
	'c|column=s@' => \@OptPredefColumns,
);

use Data::Dumper;
use List::MoreUtils qw/all any none/;
no if ($] >= 5.018), 'warnings' => 'experimental::smartmatch';
do '/usr/lib/tool/perl5/tabdata/common.pl' or die "$@";


sub flush_record
{
	my $record = shift;
	
	if(not $header_sent)
	{
		output_record(@Headers);
		$header_sent = 1;
	}
	
	output_record(map { $record->{$_} } @Headers);
}

@Headers = ();
%record = ();
$record_num = 0;
$header_sent = 0;

while(my $line = <STDIN>)
{
	chomp $line;
	if($line eq '')
	{
		if(not $header_sent)
		{
			for my $predef_column (@OptPredefColumns)
			{
				if(not $predef_column ~~ @Headers)
				{
					push @Headers, $predef_column;
				}
			}
		}
		
		if(%record)
		{
			flush_record(\%record);
			%record = ();
			$record_num++;
		}
	}
	else
	{
		my ($field, $cell) = split /$OptSeparatorRegexp/, $line, 2;
		if(exists $record{$field})
		{
			$record{$field} .= $OptMultilineGlue . $cell;
		}
		else
		{
			$record{$field} = $cell;
		}
		
		if($record_num == 0)
		{
			if(not $field ~~ @Headers)
			{
				push @Headers, $field;
			}
		}
		else
		{
			if(not $field ~~ @Headers)
			{
				unless($field ~~ @warned_fields)
				{
					warn "$0: column not defined: $field\n" if $OptWarnBadColumnNames;
					push @warned_fields, $field_name;
				}
				die if $OptFailBadColumnNames;
			}
		}
	}
}

if(%record)
{
	flush_record(\%record);
	%record = ();
	$record_num++;
}
