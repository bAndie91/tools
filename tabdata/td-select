#!/usr/bin/env perl

=pod

=head1 NAME

td-select - Show only the specified columns from the input tabular data stream.

=head1 USAGE

td-select [I<OPTIONS>] [--] [-][~]I<COLUMN> [[-][~]I<COLUMN> [...]]

=head1 OPTIONS

=over 4

=item -H, --no--header

do not show headers

=item -h, --header

show headers (default)

=item -i, --ignore-non-existing-columns

do not treat non-existing (missing or typo) column names as failure

=item -w, --warn-non-existing-columns

only show warning on non-existing (missing or typo) column names, but
don't fail

=item --strict-columns

warn and fail on non-existing (missing or typo) column names given in
parameters, even if it's prefixed with hyphen, ie. when the user want to
remove the named column from the output.

=back

=head1 DESCRIPTION

I<COLUMN> is either a column name,
or one of these special keywords:

=over 4

=item +ALL

all columns

=item +REST

the rest of columns not given yet in the parameter list

=back

I<COLUMN> is optionally prefixed with minus (C<->),
in which case the given column will not be shown,
but removed from the shown columns.

So if you want to show all columns except one or two:

  td-select +ALL -PASSWD

If you want to put a given column (say "KEY") to the first place and left others intact:

  td-select KEY +REST

I<COLUMN> is optionally prefixed with tilde (C<~>),
in which case I<COLUMN> is a regexp pattern
and all columns are to be shown (hidden) which match to the pattern.
Probably need to escape the tilde char if it's the leading char of an argument
to avoid user home directory expansion in your shell.

=head1 EXAMPLE

  ls -l | td-trans-ls | td-select -- NAME +REST -INODE -LINKS -MAJOR -MINOR

=head1 REFERENCES

"Select" in td-select comes from SQL.
Similarly to SQL, td-select(1) is to choose some of the columns and return them in the given order.

=cut

$OptShowHeader = 1;
$OptWarnBadColumnNames = 1;
$OptFailBadColumnNames = 1;
$OptFailBadNegativeColumnNames = 0;
%OptionDefs = (
	'h|header' => sub { $OptShowHeader = 1; },
	'H|no-header' => sub { $OptShowHeader = 0; },
	'i|ignore-non-existing-columns' => sub { $OptFailBadColumnNames = 0; $OptWarnBadColumnNames = 0; },
	'w|warn-non-existing-columns' => sub { $OptFailBadColumnNames = 0; $OptWarnBadColumnNames = 1; },
	'strict-columns' => sub { $OptWarnBadColumnNames = 1; $OptFailBadColumnNames = 1; $OptFailBadNegativeColumnNames = 1; },
);

no if ($] >= 5.018), 'warnings' => 'experimental::smartmatch';
do '/usr/lib/tool/perl5/tabdata/common.pl' or die "$@";

process_header(scalar <STDIN>);

@Columns = ();

while(@ARGV)
{
	my $arg = shift @ARGV;
	
	if($arg =~ /^--/)
	{
		die "$0: unknown parameter: $arg\n";
	}
	elsif($arg =~ /^-(~|)(.+)$/)
	{
		my $is_pattern = $1;
		my $except_column = $2;
		if($is_pattern)
		{
			@Columns = grep {$_ !~ $except_column} @Columns;
		}
		else
		{
			if(not exists $Header{$except_column})
			{
				my $cols = join ", ", @Header;
				warn "$0: $except_column: no such column. known columns: $cols\n" if $OptWarnBadColumnNames;
				exit 3 if $OptFailBadNegativeColumnNames;
			}
			@Columns = grep {$_ ne $except_column} @Columns;
		}
	}
	elsif($arg eq '+ALL')
	{
		push @Columns, @Header;
	}
	elsif($arg eq '+REST')
	{
		push @Columns, grep {not $_ ~~ @Columns} @Header;
	}
	elsif($arg =~ /^(~|)(.+)$/)
	{
		my $is_pattern = $1;
		my $colname = $2;
		if($is_pattern)
		{
			push @Columns, grep { $_ =~ $colname } @Header;
		}
		else
		{
			if(not exists $Header{$colname})
			{
				my $cols = join ", ", @Header;
				warn "$0: $colname: no such column. known columns: $cols\n" if $OptWarnBadColumnNames;
				exit 3 if $OptFailBadColumnNames;
			}
			push @Columns, $colname;
		}
	}
	else
	{
		die "$0: unknown parameter: $arg\n";
	}
}

# display selected headers
if($OptShowHeader and @Columns)
{
	@Output = ();
	for my $col (@Columns)
	{
		push @Output, defined $Header{$col} ? $Header[$Header{$col}] : '';
	}
	output_record(@Output);
}


# display selected data fields
while(not eof STDIN)
{
	my @Input = read_record(\*STDIN);
	
	@Output = ();
	
	for my $col (@Columns)
	{
		push @Output, defined $Header{$col} ? $Input[$Header{$col}] : '';
	}
	
	output_record(@Output);
}
