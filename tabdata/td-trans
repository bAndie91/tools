#!/usr/bin/env perl

=pod

=head1 NAME

td-trans - Transform whitespace-delimited into TAB-delimited lines ignoring sorrounding spaces.

=head1 OPTIONS

=over 4

=item -n, --min-columns I<NUM>

Register at least this many columns
even if the first records has less than this many.

=item -x, --max-columns I<NUM>

Maximum number of columns.
The I<NUM>th column may have any whitespace.
By default it's the number of fields in the header (first line).

=item -c, --columns I<NUM>

There will be exactly this many columns.
Equivalent to B<< -n I<NUM> -x I<NUM> >>.

=back

=cut

$OptMinColumns = undef;
$OptMaxColumns = undef;
%OptionDefs = (
	'n|min-columns=i' => \$OptMinColumns,
	'x|max-columns=i' => \$OptMaxColumns,
	'c|columns|cols=i' => sub { $OptMinColumns = $OptMaxColumns = $_[1]; },
);

no if ($] >= 5.018), 'warnings' => 'experimental::smartmatch';
do '/usr/lib/tool/perl5/tabdata/common.pl' or die "$@";

while(my $line = <STDIN>)
{
	chomp $line;
	$line =~ s/^[ ]*//g;
	$line =~ s/[ ]*$//g;
	
	my @Fields = split /\s+/, $line, $OptMaxColumns;
	
	if($. == 1 and not defined $OptMaxColumns)
	{
		# the first line considered header,
		# and the number of fields dictates (at most) how many fields are there in the rest of the stream.
		$OptMaxColumns = scalar @Fields;
		# if the caller wants more fields, let them.
		$OptMaxColumns = $OptMinColumns if defined $OptMinColumns and $OptMaxColumns < $OptMinColumns;
	}
	
	output_record(@Fields);
}
