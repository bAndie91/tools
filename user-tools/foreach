#!/bin/bash

true <<'EOF'
=pod

=head1 NAME

foreach - Run an OS or shell command on each input line, similar to xargs(1)

=head1 SYNOPSIS

foreach [I<OPTIONS>] I<COMMAND> [I<ARGS> ...]

=head1 DESCRIPTION

Take each input line from stdin as B<DATA>, and run I<COMMAND> with B<DATA> appended to the end of I<ARGS> as a single argument.

If C<{}> is there in I<ARGS> then it's substituted with B<DATA> rather than append to the end,
unless I<--no-placeholder> is given, because then C<{}> is read literally.
Additionally, foreach(1) parses B<DATA> into fields and add each of them to the end of I<ARGS> if I<--fields> is given.
Numbered placeholders, like C<{0}>, C<{1}>, ... are substituted with the respective field's value.
A stand-alone C<{@}> (curly bracket open, at sign, curly bracket close) argument is substituted to all fields as separate arguments.

So, for example, if you have not specified any I<ARGS> in the command line and type both I<--data> and I<--fields>,
then B<DATA> goes into argv[1], and the first field goes into argv[2], second to argv[3] and so on.
If have not given I<--data> nor I<--fields>, then I<--data> is implied.

If called with I<--sh> option, I<COMMAND> is run within a shell context;
input line goes to C<$DATA>, individual fields go to C<${FIELD[@]}> (0-indexed).

Both in B<command> and B<shell> (I<--sh>) modes, individual fields are available in
C<$F0>, C<$F1>, ... environment variables.

Set I<-d> B<DELIM> if you want to split B<DATA> not by C<$IFS> but by other delimiter chars,
eg. B<-d ',:'> for comma and colon.
There is also C<-t>/C<--tab> option to set delimiter to TAB for your convenience.

=head1 OPTIONS

=over 4

=item -e, --sh

I<COMMAND> is a shell script and for each B<DATA>, it runs in the same shell context,
so variables are preserved across invocations.

=item -l, --data

Pass B<DATA> in the arguments after the user-specified I<ARGS>.

=item -f, --fields

Pass individual fields of B<DATA> in the arguments after B<DATA> if I<--data> is given,
or after the user-specified I<ARGS> if I<--data> is not given.

=item -i, --input I<DATA>

Don't read any B<DATA> from stdin, but take I<DATA> given at B<--input> option(s).
This option is repeatable.

=item -d, --delimiter I<DELIM>

Cut up B<DATA> into fields at I<DELIM> chars.
Default is C<$IFS>.

=item -t, --tab

Cut up B<DATA> into fields at TAB chars..

=item -P, --no-placeholder

Do not substitute C<{}> with B<DATA>.

=item -p, --prefix I<TEMPLATE>

Print something before each command execution.
I<TEMPLATE> is a bash-interpolated string,
may contain C<$DATA> and C<${FIELD[n]}>.
Probably need to put in single quotes when passing to foreach(1) by the invoking shell.
It's designed to be B<eval>uated, so backtick, command substitution, semicolon, and other shell expressions are B<eval>'ed by bash.

=item --prefix-add I<TEMPLATE>

Append I<TEMPLATE> to the prefix template.
See B<--prefix> option.

=item --prefix-add-data

Add B<DATA> to the prefix which is printed before each command execution.
See B<--prefix> option.

=item --prefix-add-tab

Add a B<TAB> char to the prefix which is printed before each command execution.
See B<--prefix> option.

=item -v, --verbose

=item -n, --dry-run

=item -E, --errexit

Stop executing if a I<COMMAND> returns non-zero.
Rather exit with the said command's exit status code.

=back

=head1 EXAMPLES

 ls -l --time-style +%FT%T%z | foreach --data --fields sh -c 'echo size: $5, file: $7'
 ls -l --time-style +%FT%T%z | foreach --sh 'echo size: ${FIELD[4]}, file: ${FIELD[6]}'

=head1 LIMITS

Placeholders for field values (C<{0}>, C<{1}>, ...) are considered from 0 up to 99.
There must be a limit somewhere, otherwise I had to write a more complex replace routine.

=head1 CAVEATS

Placeholder C<{}> is substituted in all I<ARGS> anywhere, not just stand-alone C<{}> arguments,
but IS NOT ESCAPED!
So be careful using it in shell command arguments like C<sh -e 'echo "data is: {}"'>.

=head1 SEE ALSO

xargs(1), xe(1) L<https://github.com/leahneukirchen/xe>, apply(1), xapply(1) L<https://www.databits.net/~ksb/msrc/local/bin/xapply/xapply.html>

=cut

EOF




FOREACH_MODE=command
FOREACH_VERBOSE=no
unset FOREACH_DELIM
FOREACH_PASS_DATA=maybe
FOREACH_PASS_FIELDS=no
FOREACH_REPLACE_PLACEHOLDER=yes
FOREACH_DRYRUN=no
FOREACH_ERREXIT=no
FOREACH_PREFIX_TEMPLATE=''
FOREACH_INPUT_DATA=()
FOREACH_INPUT_DATA_INDEX=0


while [ $# != 0 ]
do
	case "$1" in
	(--help)
		pod2text "$0"
		exit
		;;
	(-e|--sh)
		FOREACH_MODE=sh
		;;
	(-l|--data)
		FOREACH_PASS_DATA=yes
		;;
	(-f|--fields)
		FOREACH_PASS_FIELDS=yes
		;;
	(-i|--input)
		shift
		FOREACH_INPUT_DATA+=("$1")
		;;
	(-d|--delimiter)
		shift
		FOREACH_DELIM=$1
		;;
	(-t|--tab)
		FOREACH_DELIM=$'\t'
		;;
	(-P|--no-placeholder)
		FOREACH_REPLACE_PLACEHOLDER=no
		;;
	(-p|--prefix)
		shift
		FOREACH_PREFIX_TEMPLATE=$1
		;;
	(--prefix-add)
		shift
		FOREACH_PREFIX_TEMPLATE=${FOREACH_PREFIX_TEMPLATE}"$1"
		;;
	(--prefix-add-data)
		FOREACH_PREFIX_TEMPLATE=${FOREACH_PREFIX_TEMPLATE}'$DATA'
		;;
	(--prefix-add-tab)
		FOREACH_PREFIX_TEMPLATE=${FOREACH_PREFIX_TEMPLATE}$'\t'
		;;
	(-v|--verbose)
		FOREACH_VERBOSE=yes
		;;
	(-n|--dry-run)
		FOREACH_DRYRUN=yes
		;;
	(-E|--errexit)
		FOREACH_ERREXIT=yes
		;;
	(--)
		shift
		break;;
	(-*)
		echo "foreach: unknown option: $1" >&2
		exit -1
		;;
	(*)	break;;
	esac
	shift
done

if [ $# = 0 ]
then
	pod2text "$0" >&2
	exit -1
fi

if [ $FOREACH_PASS_FIELDS = yes -a $FOREACH_PASS_DATA != yes ]
then
	FOREACH_PASS_DATA=no
fi
if [ $FOREACH_PASS_FIELDS != yes ]
then
	FOREACH_PASS_DATA=yes
fi

declare -a FOREACH_COMMAND=("$@")
declare -g DATA

next_data()
{
	if [ ${#FOREACH_INPUT_DATA[@]} -gt 0 ]
	then
		if [ $FOREACH_INPUT_DATA_INDEX -ge ${#FOREACH_INPUT_DATA[@]} ]
		then
			return 1
		else
			DATA=${FOREACH_INPUT_DATA[$FOREACH_INPUT_DATA_INDEX]}
			FOREACH_INPUT_DATA_INDEX=$[FOREACH_INPUT_DATA_INDEX + 1]
			return 0
		fi
	else
		local rc
		read -r DATA
		rc=$?
		if [ $rc != 0 -a -z "$DATA" ]
		then
			return $rc
		fi
		return 0
	fi
}

while next_data
do
	export DATA
	declare -a FIELD=()
	IFS=${FOREACH_DELIM+$FOREACH_DELIM}${FOREACH_DELIM-$IFS} read -r -a FIELD <<< "$DATA"
	
	for ((idx = 0; idx < ${#FIELD[@]}; idx++))
	do
		export F$idx="${FIELD[$idx]}"
	done
	# unset old F$idx variables
	while declare -p F$idx >/dev/null 2>/dev/null
	do
		unset F$idx
		let idx++
	done
	
	FOREACH_COMMAND_STATUS=0
	
	declare -a cmd_and_args=()
	placeholder_found=no
	if [ "$FOREACH_REPLACE_PLACEHOLDER" = yes ]
	then
		for arg in "${FOREACH_COMMAND[@]}"
		do
			if [ "$arg" = '{@}' ]
			then
				placeholder_found=yes
				cmd_and_args+=("${FIELD[@]}")
			else
				if [[ $arg =~ \{\} ]]
				then
					placeholder='{}'
					arg=${arg//$placeholder/$DATA}
					placeholder_found=yes
				fi
				for ((idx = 0; idx < 100; idx++))
				do
					if [[ $arg =~ \{$idx\} ]]
					then
						placeholder="{$idx}"
						arg=${arg//$placeholder/${FIELD[$idx]}}
						placeholder_found=yes
					fi
				done
				cmd_and_args+=("$arg")
			fi
		done
	else
		cmd_and_args=("${FOREACH_COMMAND[@]}")
	fi
	
	if [ "$FOREACH_MODE" = command ]
	then
		if [ "$FOREACH_REPLACE_PLACEHOLDER" != yes -o $placeholder_found = no ]
		then
			if [ "$FOREACH_PASS_DATA" = yes ]; then cmd_and_args+=("$DATA"); fi
			if [ "$FOREACH_PASS_FIELDS" = yes ]; then cmd_and_args+=("${FIELD[@]}"); fi
		fi
	fi
	
	if [ "$FOREACH_VERBOSE" = yes ]
	then
		echo "foreach: ${cmd_and_args[*]}" >&2
	fi
	
	eval "FOREACH_PREFIX=\"$FOREACH_PREFIX_TEMPLATE\""
	echo -n "$FOREACH_PREFIX"
	
	if [ "$FOREACH_DRYRUN" = no ]
	then
		if [ "$FOREACH_MODE" = command ]
		then
			command "${cmd_and_args[@]}"
			FOREACH_COMMAND_STATUS=$?
		else
			eval "${cmd_and_args[@]}"
			FOREACH_COMMAND_STATUS=$?
		fi
	fi
	
	if [ $FOREACH_ERREXIT = yes -a $FOREACH_COMMAND_STATUS != 0 ]
	then
		exit $FOREACH_COMMAND_STATUS
	fi
done
