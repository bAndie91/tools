#!/bin/bash


target_template="%Y/%m/%d/"
time_stat_field=Y
time_field_name=mtime
verbose=''
dryrun=0
minlevel=''
maxlevel=''
all_files_type=''
datetime_from_embedmeta=''  # determine datetime from embedded metadata?
fallback_to_filetime=''
export ORGANIZEBYDATE_MODE=copy
custom_handler=''
set_mtime=''
set_atime=''
allow_overwrite=''
conflict_resolver_cmd=''
conflict_resolver_script=''
faillog=''
declare -g failed_count=0
move_success_template=''


print_usage()
{
cat <<EOF
=pod

=head1 NAME

organizebydate - Rename files based on their date-time

=head1 SYNOPSIS

organizebydate [I<OPTIONS>] I<PATHS> [I<FIND-PARAM>]

=head1 DESCRIPTION

Organize files by date and time, typically into a directory structure.

I<PATHS> are file and/or directory paths.

I<FIND-PARAM> are find(1) expressions (predicates) to filter which files to work on,
or B<-H>, B<-L>, or B<-P> options - see find(1).

=head1 OPTIONS

=over 4

=item -t, --template I<TMPL>

Target path name template using strftime(3) macros.

Default: $target_template

Extra macros accepted:

=over 8

=item %@

File's directory path

=item %.

File's name itself (basename)

=back

=item --move, --copy

Move or copy files.
Default is copy.

=item --move-success-template I<TMPL>

Move successfully copied files according to I<TMPL> template.
This is useful only with B<--copy>.
Default is not to move away successfully copied filed.
This is useful if you want to keep backed up files on the source too but in another directory so they won't be processed again.

=item --overwrite

Overwrite already existing target files.
Default is to silently ignore them.
Note, this affects only B<--copy> and B<--move>, not B<--handler>.

=item --handler I<PROG>

Execute I<PROG> to handle files 1-by-1 instead of internal copy or move.
You may do C<< --handler "rsync -Pvit --inplace --mkpath" --template I<HOSTNAME>:I<PATH> >> to upload via ssh/rsync
(beware, B<< --set-I<*>time >> and conflicting filename checking work only on local paths)
or implement any file transfer method here.
Arguments passed (after those which are given in I<PROG>) are
first, the source file path, and second, the target file path.
Conflicting target path is still checked and resolver is run before I<PROG>
if B<--conflict-resolver-cmd> or B<--conflict-resolver-script> is specified;
if not, I<PROG> should implement conflicting file name resolution logic.

=item --conflict-resolver-cmd I<CMD>, --conflict-resolver-script I<SCRIPT>

Run a custom conflict resolver logic on already existing target files.
Unless conflict resolver is given, organizebydate(1) ignores conflicts silently
or overwrites target unconditionally if B<--overwrite> is specified.

The conflict resolver can either be a single word command
or a command and its arguments when I<CMD> contains space
(in this case you can not pass argument itself with spaces to the command
because each space-delimited words go to separate arguments),
or a whole bash(1) script if B<--conflict-resolver-script> is given.
I<SCRIPT> is run as a separate command too, not in organizebydate(1)'s own context.

Arguments passed to this command (after the arguments included in I<CMD>, if any)
are the source file's path first and the target path secondly.
Environment variables passed:

=over 8

=item ORGANIZEBYDATE_MODE

B<copy> or B<move>

=item SOURCE_FILE_MTIME

=item TARGET_FILE_MTIME

=item SOURCE_FILE_CTIME

=item TARGET_FILE_CTIME

=item SOURCE_FILE_ATIME

=item TARGET_FILE_ATIME

=item SOURCE_FILE_SIZE

=item TARGET_FILE_SIZE

Some attributes of the source and target files to help the resolver.
File time attributes are in unix timestamp, size is in bytes.

=back

Non-zero exit status is considered failure (and recorded if B<--faillog> is given).
On zero exit status, the conflict resolution is get from the last line in the command's output.
Don't write more than 1 newline char (C<\n>) to the very end.
Conflict resolutions:

=over 8

=item B<skip>

Don't copy (move) source file,
and don't do any processing (eg. don't move successfully copied source file).

=item B<proceed> [I<NEW-TARGET>]

Copy (move) source to target.
Optionally with a new target path.
This always (attempts to) overwrites the target
even if B<--overwrite> is not given,
and in either cases: with or without I<NEW-TARGET> being given.

=item B<done>

Indicate that the source file is already there on the target path,
and no need to copy/move.
organizebydate(1) may still set the target's mtime (atime)
when B<--set-mtime> (B<--set-atime>) option is given;
and still moves the source file when B<--move-success-template> is given.
Emit B<done> signal if the B<same> file is already present on the target location,
or the conflict resolver put it there,
with equal binary content to the source file.

=item B<fail>

Similar to B<done> but explicitely fail the current item copy/move.
This is recorded in fail log if B<--faillog> option is given.

=item other words are considered failure for now.

=back

You may do extra steps in the conflict resolver's logic:
eg. rename old target or move to an other directory and signal B<proceed> at the end,
or eg. remove source file and signal B<skip> - this is useful in B<move> mode.

If you want to ask the user interactively, don't read from stdin(3),
rather re-open the tty(4).

stdout(3) is buffered and then echoed except the last line.
stderr(3) is let through as-is.

=item -c, -m, -a, --ctime, --mtime, --atime

Determining timestamps is based on the file's change-, modify-, or access-time.
Default is mtime.

=item -E, --email

Files are raw Emails.

Determining timestamps is based on the Date header.

=item -J, --jpeg

Files are JPEG images.

Determining timestamps is based on EXIF tags.

=item --fallback-to-filetime

Fall back to file mtime (ctime, atime) if datetime info is not found in embedded metadata (RFC-822, Exif, ...)

=item --set-mtime, --set-atime

Set the copied (moved) files' mtime (atime) to the datetime used in the template.

=item --faillog I<FILE>

Save failed paths to I<FILE>.

=item -v, --verbose

Verbose mode

=item -n, --dry-run

Dry run. Do not copy (move) files.
Output what would be done in C<< SOURCE -> TARGET >> for move
or in C<< SOURCE => TARGET >> format for copy.
It's knowningly error-prone for machine-parsing.

=item --help, --pod, --troff

Output documentation in plain text, POD, or troff (for man(1)) formats.

=item -i, --min-depth

Minimum directory level to traverse.
Equivalent to find(1)'s -mindepth option.

=item -x, --max-depth

Maximum directory level to traverse.
Equivalent to find(1)'s -maxdepth option.

=back

=head1 EXIT STATUS

Exit 0 if all files processed successfully.

Exit 1 on parameter error.

Exit 2 if at least 1 file is failed.

=cut

EOF
}


set -e
. /usr/lib/tool/bash-utils
set +e


overwrite_opt()
{
	local allow_overwrite=$1
	if [ "$allow_overwrite" = 1 ]
	then
		echo ''
	else
		echo --no-clobber
	fi
}

render_path_template()
{
	local target_template=$1
	local filetimestamp=$2
	local basedir=$3
	local basename=$4
	local target=`date +"$target_template" -d "@$filetimestamp" | sd -F '%@' "$basedir" | sd -F '%.' "$basename"`
	if [ "${target: -1}" = / ]
	then
		target=$target$basename
	fi
	echo "$target"
}

failed()
{
	local reason=$1
	local file=$2
	
	failed_count=$[failed_count + 1]
	
	warnx "$reason failed: $file"
	if [ -n "$faillog" ]
	then
		echo "$file" >> "$faillog"
	fi
}

set_file_attr_env()
{
	local varprefix=$1
	local path=$2
	local -a stat=(`stat -c '%X %Y %Z %s' "$path"`)
	local -A attridx=([ATIME]=0 [MTIME]=1 [CTIME]=2 [SIZE]=3)
	local attr
	for attr in ATIME MTIME CTIME SIZE
	do
		declare -x -g ${varprefix}_FILE_${attr}=${stat[${attridx[$attr]}]}
	done
}

echone()
{
	if [ -n "$*" ]; then echo "$@"; fi
}


while [ $# -gt 0 ]
do
	case "$1" in
	(-h|--help)
		print_usage | pod2text
		exit $?
		;;
	(--pod)
		print_usage
		exit 0
		;;
	(--troff)
		print_usage | pod2man
		exit $?
		;;
	(-t|--target|--template)
		shift
		target_template="$1"
		;;
	(-c|--ctime)
		time_stat_field=Z
		time_field_name=ctime
		;;
	(-m|--mtime)
		time_stat_field=Y
		time_field_name=mtime
		;;
	(-a|--atime)
		time_stat_field=X
		time_field_name=atime
		;;
	(-E|--rfc822|--email)
		all_files_type=email
		datetime_from_embedmeta=1
		;;
	(-J|--jpeg)
		all_files_type=jpeg
		datetime_from_embedmeta=1
		;;
	(--fallback-to-filetime)
		fallback_to_filetime=1
		;;
	(--faillog)
		shift
		faillog=$1
		;;
	(--set-atime)
		set_atime=1
		;;
	(--set-mtime)
		set_mtime=1
		;;
	(-v|--verbose)
		verbose=-v
		;;
	(-n|--dry-run)
		dryrun=1
		;;
	(-i|--min-depth)
		shift
		minlevel=$1
		;;
	(-x|--max-depth)
		shift
		maxlevel=$1
		;;
	(--copy)
		ORGANIZEBYDATE_MODE=copy
		;;
	(--move)
		ORGANIZEBYDATE_MODE=move
		;;
	(--move-success-template)
		if [ "$ORGANIZEBYDATE_MODE" != copy ]
		then
			errx 1 "move-success-template works only in --copy mode"
		fi
		shift
		move_success_template=$1
		;;
	(--handler)
		shift
		custom_handler=$1
		ORGANIZEBYDATE_MODE=custom
		;;
	(--overwrite)
		allow_overwrite=1
		;;
	(--conflict-resolver-cmd)
		if [ -n "$conflict_resolver_script" ]
		then
			errx 1 "conflict-resolver-cmd is mutually exclusive with conflict-resolver-script"
		fi
		shift
		conflict_resolver_cmd=$1
		set -f
		declare -a conflict_resolver_cmd_args=($conflict_resolver_cmd)
		set +f
		;;
	(--conflict-resolver-script)
		if [ -n "$conflict_resolver_cmd" ]
		then
			errx 1 "conflict-resolver-script is mutually exclusive with conflict-resolver-cmd"
		fi
		shift
		conflict_resolver_script=$1
		;;
	(-*)
		errx 1 "unknown option: $1"
		;;
	(--)
		shift
		break
		;;
	(*)
		break
		;;
	esac
	shift
done

if [ $# = 0 ]
then
	print_usage | pod2text >&2
	exit 1
fi


find_opts=()
find_args=()

while [ $# -gt 0 ]
do
	case "$1" in
	(-H|-L|-P)	find_opts+=("$1");;
	(*)			find_args+=("$1");;
	esac
	shift
done

find "${find_opts[@]}" "${find_args[@]}" ${minlevel:+-mindepth $minlevel} ${maxlevel:+-maxdepth $maxlevel} -type f -print0 |\
{
	set -e
	while read -d '' file
	do
		basedir=`dirname "$file"`
		basename=`basename "$file"`
		datetime=''
		filetimestamp=''
		missing_embedmeta=''
		
		if [ $datetime_from_embedmeta ]
		then
			case "$all_files_type" in
			(email)
				datetime=`grep -m 1 -i -E '^Date:' "$file" | cut -d':' -f2-`
				datetime=${datetime##+( )}
				;;
			(jpeg)
				if type exif >/dev/null 2>&1
				then
					# Date/Time Original, Create Date, Modify Date, Date
					for tagid in 0x9003 0x9004 0x0132 0x0006
					do
						datetime=`exif -m -t $tagid "$file" </dev/null 2>/dev/null || true`
						if [ -n "$datetime" ]
						then
							break
						else
							warnx "no tag $tagid: $file"
						fi
					done
				fi
				if [ -z "$datetime" ] && type exiftool >/dev/null 2>&1
				then
					for tag in DateTimeOriginal CreateDate ModifyDate Date
					do
						datetime=`exiftool -d "%Y-%m-%d %H:%M:%S" -$tag -s3 "$file" </dev/null 2>/dev/null || true`
						if [ -n "$datetime" ]
						then
							break
						else
							warnx "no $tag tag: $file"
						fi
					done
				fi
				date=${datetime:0:10}
				time=${datetime:10}
				datetime=${date//:/-}${time}
				;;
			esac
			
			if [ -n "$datetime" ]
			then
				filetimestamp=`date +%s -d "$datetime"`
			else
				missing_embedmeta=1
				warnx "can not determine datetime: $file"
				if [ "$fallback_to_filetime" = 1 ]
				then
					warnx "fallback to file $time_field_name"
				fi
			fi
		fi
		
		if [ ! $datetime_from_embedmeta ] || [ "$missing_embedmeta" = 1 -a "$fallback_to_filetime" = 1 ]
		then
			filetimestamp=`stat -c %$time_stat_field "$file"`
		fi
		
		if [ -z "$filetimestamp" ]
		then
			failed "determine datetime" "$file"
			continue
		fi
		
		target=`render_path_template "$target_template" "$filetimestamp" "$basedir" "$basename"`
		target_dir=`dirname "$target"`
		
		if [ "$dryrun" = 1 ]
		then
			sgn='-'
			[ "$ORGANIZEBYDATE_MODE" = copy ] && sgn='='
			echo "$file $sgn> $target"
		else
			local_allow_overwrite=$allow_overwrite
			current_item_failed=''
			current_item_silently_ignored=''
			current_item_already_handled=''
			
			if [ -e "$target" -a \( -n "$conflict_resolver_cmd" -o -n "$conflict_resolver_script" \) ]
			then
				set_file_attr_env SOURCE "$file"
				set_file_attr_env TARGET "$target"
				
				set +e
				if [ -n "$conflict_resolver_cmd" ]
				then
					resolver_stdout=`command "${conflict_resolver_cmd_args[@]}" "$file" "$target" </dev/null`
					resolver_err=$?
				else
					resolver_stdout=`bash -c "$conflict_resolver_script" -- "$file" "$target" </dev/null`
					resolver_err=$?
				fi
				set -e
				if [ $resolver_err = 0 ]
				then
					resolver_stdout=${resolver_stdout%$'\n'}  # strip 1 trailing newline, if any
					resolution=${resolver_stdout##*$'\n'}  # take the last line only
					resolver_stdout=${resolver_stdout:0:-${#resolution}}  # keep everything except the last line
					resolver_stdout=${resolver_stdout%$'\n'}  # strip 1 trailing newline again
					echone "$resolver_stdout"
					
					if [ "$resolution" = skip ]
					then
						continue
					elif [ "$resolution" = done ]
					then
						current_item_already_handled=1
						current_item_failed=''
					elif [ "$resolution" = fail ]
					then
						current_item_already_handled=1
						failed "conflict resolution explicitely" "$file"
						current_item_failed=1
					elif [[ $resolution =~ ^proceed(| (.+))$ ]]
					then
						newtarget=${BASH_REMATCH[2]}
						if [ -n "$newtarget" ]
						then
							target=$newtarget
							target_dir=`dirname "$target"`
						fi
						local_allow_overwrite=1  # let cp (mv) overwrite this target item
					else
						warnx "unknown conflict resolution: $resolution"
						failed "conflict resolve" "$file"
						continue
					fi
				else
					echone "$resolver_stdout"
					warnx "conflict resolver error $resolver_err: $file"
					failed "conflict resolve" "$file"
					continue
				fi
			fi
			
			if [ ! $current_item_already_handled ]
			then
				current_item_failed=''
				
				case "$ORGANIZEBYDATE_MODE" in
				(copy|move)
					[ -d "$target_dir" ] || mkdir -p "$target_dir"
					if [ -e "$target" -a ! "$local_allow_overwrite" ]
					then
						current_item_silently_ignored=1
					fi
					;;&
				(copy)
					if ! cp $verbose $(overwrite_opt "$local_allow_overwrite") --preserve=timestamps "$file" "$target"
					then
						failed copy "$file"
						current_item_failed=1
					fi
					;;
				(move)
					if ! mv $verbose $(overwrite_opt "$local_allow_overwrite") "$file" "$target"
					then
						failed move "$file"
						current_item_failed=1
					fi
					;;
				(custom)
					if ! command ${custom_handler:-false} "$file" "$target"
					then
						failed handle "$file"
						current_item_failed=1
					fi
					;;
				esac
			fi
			
			if [ ! "$current_item_silently_ignored" -a ! "$current_item_failed" ]
			then
				# set mtime/atime on the target file just created.
				if [ "$set_atime" = 1 -o "$set_mtime" = 1 ]
				then
					touch_opts=()
					if [ "$set_atime" = 1 ]; then touch_opts+=(-a); fi
					if [ "$set_mtime" = 1 ]; then touch_opts+=(-m); fi
					touch -t `date +%Y%m%d%H%M.%S -d "@$filetimestamp"` "${touch_opts[@]}" "$target"
				fi
				
				# move away source file (only in copy mode).
				if [ "$ORGANIZEBYDATE_MODE" = copy -a -n "$move_success_template" ]
				then
					move_success_target=`render_path_template "$move_success_template" "$filetimestamp" "$basedir" "$basename"`
					move_success_target_dir=`dirname "$move_success_target"`
					[ -d "$move_success_target_dir" ] || mkdir -p "$move_success_target_dir"
					
					if ! mv $verbose --no-clobber "$file" "$move_success_target"
					then
						# TODO what if $move_success_target already exists?
						failed "move successfully copied file" "$file"
						current_item_failed=1
					fi
				fi
			fi
		fi
	done
	
	if [ $failed_count -gt 0 ]
	then
		exit 2
	else
		exit 0
	fi
}
exit ${PIPESTATUS[1]}
