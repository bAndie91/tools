#!/bin/bash
# Usage Example:
# $ . ssh-agent-finder -Iva

interactive=Y
havingkeys=Y
list_all=N
verbose=N
sourced=N

. /usr/lib/yazzy-utils/bash-utils

«()
{
	declare -a args
	for arg in "$@"
	do
		if is_alpha "${arg:0:1}" && bash_defined "$arg"; then arg=${!arg}; fi
		if [ "$arg" = N ]; then arg=''; fi
		
		if [ "$arg" = » ]; then continue
		elif [ "$arg" = [ ]; then arg='('
		elif [ "$arg" = ] ]; then arg=')'
		elif [ "$arg" = AND ]; then arg='-a'
		elif [ "$arg" = OR ]; then arg='-o'
		fi
		
		args+=("$arg")
	done
	[ "${args[@]}" ]
}

parse_opts()
{
	local OPTIND=1
	Usage="Usage: $0 [-IkKav]
 -I   No interactive, use first socket
 -k   Use socket having keys (default)
 -K   Use socket not necessary having keys
 -a   List all sockets
 -v   Verbose"
 	if [ "$1" = --help ]
 	then
 		echo "$Usage" >&2
 		return 1
 	fi
	while getopts hIkKav opt "$@"
	do
		case "$opt" in
		h)		echo "$Usage" >&2
				return 1;;
		I)		interactive=N;;
		k)		havingkeys=Y;;
		K)		havingkeys=N;;
		a)		list_all=Y;;
		v)		verbose=Y;;
		'?')	return 1;;
		esac
	done
	return 0
}




if [ "$0" != "$BASH_SOURCE" ]
then
	sourced=Y
fi


parse_opts "$@"
code=$?
if [ $code != 0 ]
then
	if « sourced »
	then
		return $code
	else
		exit $code
	fi
fi


for file in /tmp/ssh-*/agent.* $HOME/.cache/keyring-*/ssh
do
	if [ -S "$file" ]
	then
		SSH_AUTH_SOCK=$file capture2 ssh-add -l
		code=$?
		if [ $code = 0 ]
		then
			has_keys=Y
			use=Y
		elif [ $code = 1 ]
		then
			has_keys=N
			if « havingkeys »
			then
				use=N
			else
				use=Y
			fi
		else
			# code == 2: non-functioning socket
			has_keys=N
			use=N
		fi
		
		if « [ [ ! havingkeys OR has_keys ] AND [ interactive OR verbose ] ] OR list_all »
		then
			echo =============
			if [ "$SSH_AUTH_SOCK" = "$file" ]
			then
				echo -n "(current) *** "
			fi
			echo "SSH_AUTH_SOCK $file"
			[ -n "$capture2_stdout" ] && echo "$capture2_stdout"
			[ -n "$capture2_stderr" ] && echo "$capture2_stderr" >&2
		fi
		
		if « [ ! havingkeys OR has_keys ] OR list_all »
		then
			if « interactive »
			then
				use=N
				« ! havingkeys OR has_keys » && default=Y || default=N
				read -e -p "Use this socket? [$default] "
				if [ -z "$REPLY" ]
				then
					[ $code = 0 ] && use=Y
				else
					REPLY=${REPLY^^}
					REPLY=${REPLY:0:1}
					[ "$REPLY" = Y ] && use=Y
				fi
			fi
			if « use »
			then
				if « sourced »
				then
					export SSH_AUTH_SOCK=$file
					return 0
				else
					echo "export SSH_AUTH_SOCK='${file//\'/\'\\\'\'}'"
					exit 0
				fi
				break
			fi
		fi
	fi
done

false
