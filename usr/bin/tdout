#!/usr/bin/env perl5.18-or-later

use Data::Dumper;
use Getopt::Long;
use Perl::Tokenizer;

do $ENV{'PERL5LIB_ROOT'}."/usr/lib/tdat/common.pl" or die "$@: $!";

my $skip_output_headers = 0;
my @add_columns;
my @exclude_columns;

GetOptions(
	'F=s' => \$IFS,
	'S=s' => \$OFS,
	'H' => \$skip_output_headers,
	'p=s{1,}' => \@add_columns,
	'x=s{1,}' => \@exclude_columns,
) or
die "Usage: $0 [<OPTIONS>] [--] [<COLUMN> [<COLUMN> [...]]]
OPTIONS:
  -F REGEX        input field separator (default: /$IFS/)
  -S STRING       output field separator (default: ".vardump($OFS).")
  -H              do not output headers
  -p COL COL ...  prepend new column(s) with the given name(s)
  -x COL COL ...  show all columns except the given ones
COLUMNs are the column names to be shown only, in order, unless -x or -a is
given. If no COLUMN is given, then all will be shown (except the ones specified
by -x). Multiple column names can be specified after '-p', so separate '-p'
option's parameters from the rest of COLUMN names by '--' (double dash) to
make them unambiguous.
";


my $header = <STDIN>;
chomp $header;
my @INPUT_COLUMNS = parse_column_headers($header);
undef $header;


my @OUTPUT_COLUMNS;
@OUTPUT_COLUMNS = @ARGV ? @ARGV : @INPUT_COLUMNS;
unshift @OUTPUT_COLUMNS, @add_columns;
@OUTPUT_COLUMNS = grep { my $c = $_; not grep {$_ eq $c} @exclude_columns } @OUTPUT_COLUMNS;


$\ = "\n";

if(not $skip_output_headers)
{
	print join $OFS, @OUTPUT_COLUMNS;
}


# process input
while(<STDIN>)
{
	chomp;
	my %FIELD = parse_record($_, @INPUT_COLUMNS);
	print join $OFS, map { $FIELD{$_} } @OUTPUT_COLUMNS;
}
